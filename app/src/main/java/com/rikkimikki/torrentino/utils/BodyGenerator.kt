package com.rikkimikki.torrentino.utils

import okhttp3.MediaType.Companion.toMediaTypeOrNull
import okhttp3.RequestBody
import okhttp3.RequestBody.Companion.toRequestBody
import org.json.JSONObject

fun generateBody(operationName: String, variables: String, query: String): RequestBody {
    var body: RequestBody? = null
    val jsonObject = JSONObject()
    try {
        jsonObject.put("operationName", operationName)
        jsonObject.put("variables", JSONObject(variables))
        jsonObject.put("query", query)

        body = jsonObject.toString()
            .toRequestBody("application/json; charset=utf-8".toMediaTypeOrNull())
    } catch (e: Exception) {
        e.printStackTrace()
    }
    return body!!
}

fun getCategoriesBody(): RequestBody {
    return generateBody(
        "MovieListCategory",
        "{\"id\":8,\"limit\":30,\"offset\":0,\"withUserData\":\"false\"}",
        "query MovieListCategory(\$id: Int!, \$limit: Int, \$offset: Int, \$withUserData: Boolean!) { movieListCategory(id: \$id) { id name movieLists(limit: \$limit, offset: \$offset) { total items { name slug movies { total __typename } cover { avatarsUrl __typename } coverBackground { avatarsUrl __typename } currentFilters { booleanFilterValues { filterId value __typename } singleSelectFilterValues { filterId value __typename } __typename } availableFilters(limit: 1, offset: 0, filter: {filterIds: [\"top\"]}) { items { ... on BooleanFilter { enabled __typename } __typename } __typename } userData @include(if: \$withUserData) { watched __typename } __typename } __typename } __typename } } "
    )
}

fun getFilmsFromCategoryBody(category: String, offset: Int): RequestBody {
    return generateBody(
        "MovieDesktopListPage",
        String.format(
            "{\"slug\": \"\", \"platform\": \"DESKTOP\", \"regionId\": 213, \"withUserData\": \"false\", \"supportedFilterTypes\": [\"BOOLEAN\", \"SINGLE_SELECT\"], \"filters\": {\"booleanFilterValues\": [], \"intRangeFilterValues\": [], \"singleSelectFilterValues\": [{\"filterId\": \"genre\", \"value\": \"%s\"}], \"multiSelectFilterValues\": [], \"realRangeFilterValues\": []}, \"singleSelectFiltersLimit\": 250, \"singleSelectFiltersOffset\": 0, \"moviesLimit\": 50, \"moviesOffset\": %s, \"moviesOrder\": \"POSITION_ASC\", \"supportedItemTypes\": [\"COMING_SOON_MOVIE_LIST_ITEM\", \"MOVIE_LIST_ITEM\", \"TOP_MOVIE_LIST_ITEM\", \"POPULAR_MOVIE_LIST_ITEM\", \"MOST_PROFITABLE_MOVIE_LIST_ITEM\", \"MOST_EXPENSIVE_MOVIE_LIST_ITEM\", \"BOX_OFFICE_MOVIE_LIST_ITEM\", \"OFFLINE_AUDIENCE_MOVIE_LIST_ITEM\", \"RECOMMENDATION_MOVIE_LIST_ITEM\"]}",
            category,
            offset
        ),
        "query MovieDesktopListPage(\$slug: String!, \$platform: WebClientPlatform!, \$withUserData: Boolean!, \$regionId: Int!, \$supportedFilterTypes: [FilterType]!, \$filters: FilterValuesInput, \$singleSelectFiltersLimit: Int!, \$singleSelectFiltersOffset: Int!, \$moviesLimit: Int, \$moviesOffset: Int, \$moviesOrder: MovieListItemOrderBy, \$supportedItemTypes: [MovieListItemType]) { movieListBySlug(slug: \$slug, supportedFilterTypes: \$supportedFilterTypes, filters: \$filters) { id name description cover { avatarsUrl __typename } ...MovieListCompositeName ...MovieListAvailableFilters ...MovieList ...DescriptionLink __typename } webPage(platform: \$platform) { kpMovieListPage(movieListSlug: \$slug) { htmlMeta { ...OgImage __typename } footer { ...FooterConfigData __typename } featuring { ...MovieListFeaturingData __typename } __typename } __typename } } fragment MovieListCompositeName on MovieListMeta { compositeName { parts { ... on FilterReferencedMovieListNamePart { filterValue { ... on SingleSelectFilterValue { filterId __typename } __typename } name __typename } ... on StaticMovieListNamePart { name __typename } __typename } __typename } __typename } fragment MovieListAvailableFilters on MovieListMeta { availableFilters { items { ... on BooleanFilter { ...ToggleFilter __typename } ... on SingleSelectFilter { ...SingleSelectFilters __typename } __typename } __typename } __typename } fragment ToggleFilter on BooleanFilter { id enabled name { russian __typename } __typename } fragment SingleSelectFilters on SingleSelectFilter { id name { russian __typename } hint { russian __typename } values(offset: \$singleSelectFiltersOffset, limit: \$singleSelectFiltersLimit) { items { name { russian __typename } selectable value __typename } __typename } __typename } fragment MovieList on MovieListMeta { movies(limit: \$moviesLimit, offset: \$moviesOffset, orderBy: \$moviesOrder, supportedItemTypes: \$supportedItemTypes) { total items { movie { id title { russian original __typename } poster { avatarsUrl fallbackUrl __typename } countries { id name __typename } genres { id name __typename } cast: members(role: [ACTOR], limit: 3) { items { details person { name originalName __typename } __typename } __typename } directors: members(role: [DIRECTOR], limit: 1) { items { details person { name originalName __typename } __typename } __typename } url rating { kinopoisk { isActive count value __typename } expectation { isActive count value __typename } __typename } mainTrailer { id __typename } viewOption { buttonText originalButtonText promotionIcons { avatarsUrl fallbackUrl __typename } isAvailableOnline: isWatchable(filter: {anyDevice: false, anyRegion: false}) purchasabilityStatus subscriptionPurchaseTag type rightholderLogoUrlForPoster availabilityAnnounce { availabilityDate type groupPeriodType announcePromise __typename } __typename } isTicketsAvailable(regionId: \$regionId) ... on Film { productionYear duration isShortFilm top250 __typename } ... on TvSeries { releaseYears { start end __typename } seriesDuration totalDuration top250 __typename } ... on MiniSeries { releaseYears { start end __typename } seriesDuration totalDuration top250 __typename } ... on TvShow { releaseYears { start end __typename } seriesDuration totalDuration top250 __typename } ... on Video { productionYear duration isShortFilm __typename } ...MovieListUserData @include(if: \$withUserData) __typename } ... on TopMovieListItem { position positionDiff rate votes __typename } ... on MostProfitableMovieListItem { boxOffice { amount __typename } budget { amount __typename } ratio __typename } ... on MostExpensiveMovieListItem { budget { amount __typename } __typename } ... on OfflineAudienceMovieListItem { viewers __typename } ... on PopularMovieListItem { positionDiff __typename } ... on BoxOfficeMovieListItem { boxOffice { amount __typename } __typename } ... on RecommendationMovieListItem { __typename } ... on ComingSoonMovieListItem { releaseDate { date accuracy __typename } __typename } __typename } __typename } __typename } fragment MovieListUserData on Movie { userData { folders { id name public __typename } watchStatuses { notInterested { value __typename } watched { value __typename } __typename } voting { value votedAt __typename } __typename } __typename } fragment DescriptionLink on MovieListMeta { descriptionLink { title url __typename } __typename } fragment OgImage on HtmlMeta { openGraph { image { avatarsUrl __typename } __typename } __typename } fragment FooterConfigData on FooterConfiguration { socialNetworkLinks { icon { avatarsUrl __typename } url __typename } appMarketLinks { icon { avatarsUrl __typename } url __typename } links { title url __typename } __typename } fragment MovieListFeaturingData on MovieListFeaturing { items { title url __typename } __typename } "
    )
}

fun getFilmsBody(filmID: Int): RequestBody {
    return generateBody(
        "FilmBaseInfo",
        String.format(
            "{\"filmId\":%s,\"isAuthorized\":\"false\",\"kpCityId\":1,\"promotionsConfig\":{\"configVersion\":\"1.0\",\"platform\":\"kp\"},\"actorsLimit\":10,\"voiceOverActorsLimit\":5,\"relatedMoviesLimit\":14,\"mediaBillingTarget\":\"kp-0822\"}",
            filmID
        ),
        "query FilmBaseInfo(\$filmId: Long!, \$isAuthorized: Boolean!, \$kpCityId: Int!, \$promotionsConfig: PromotionConfigFilterInput!, \$mediaBillingTarget: String!, \$actorsLimit: Int, \$voiceOverActorsLimit: Int, \$relatedMoviesLimit: Int) { film(id: \$filmId) { id contentId type isTvOnly top250 top10 shortDescription synopsis title { russian english original __typename } productionYear productionStatus productionStatusUpdateDate genres { id name slug __typename } ...FilmIsTicketsAvailable ott { preview { availableMetadata(filter: {isSupportedByClient: null}) { audio subtitles videoDescriptorNames __typename } ... on OttPreview_AbstractVideo { duration timing @include(if: \$isAuthorized) { current maximum __typename } __typename } __typename } promoTrailers: trailers(onlyPromo: true, limit: 1) { items { streamUrl __typename } __typename } ... on Ott_AbstractVideo { skippableFragments { startTime endTime type __typename } __typename } __typename } editorAnnotation countries { id name __typename } restriction { age mpaa __typename } mainTrailer { id title preview { avatarsUrl fallbackUrl __typename } duration createdAt isEmbedded streamUrl __typename } releaseOptions { isImax is3d __typename } cover { image { avatarsUrl fallbackUrl __typename } __typename } onlineViewOptions { descriptionWithPlaceholders descriptionSubtext subscriptionOffersBatchId subscriptionOffersPositionId __typename } viewOption { ...ViewOption __typename } actors: members(limit: \$actorsLimit, role: [ACTOR, CAMEO, UNCREDITED]) { items { person { id name originalName __typename } __typename } total __typename } voiceOverActors: members(limit: \$voiceOverActorsLimit, role: VOICEOVER) { items { person { id name originalName __typename } __typename } total __typename } tagline directors: members(role: DIRECTOR, limit: 4) { items { person { id name originalName __typename } __typename } __typename } writers: members(role: WRITER, limit: 4) { items { person { id name originalName __typename } __typename } __typename } producers: members(role: PRODUCER, limit: 4) { items { person { id name originalName __typename } __typename } __typename } operators: members(role: OPERATOR, limit: 4) { items { person { id name originalName __typename } __typename } __typename } composers: members(role: COMPOSER, limit: 4) { items { person { id name originalName __typename } __typename } __typename } designers: members(role: [DESIGN, ART, COSTUMER, DECORATOR], limit: 13) { items { person { id name originalName __typename } __typename } __typename } filmEditors: members(role: EDITOR, limit: 4) { items { person { id name originalName __typename } __typename } __typename } boxOffice { budget { amount currency { symbol __typename } __typename } rusBox { amount currency { symbol __typename } __typename } usaBox { amount currency { symbol __typename } __typename } worldBox { amount currency { symbol __typename } __typename } marketing { amount currency { symbol __typename } __typename } __typename } ...MoviePoster rating { expectation { value count isActive __typename } imdb { value count isActive __typename } kinopoisk { value count isActive __typename } russianCritics { value count isActive __typename } worldwideCritics { value percent count isActive positiveCount negativeCount __typename } reviewCount { value count isActive __typename } __typename } duration keywords(limit: 0) { total __typename } awards(limit: 0) { total __typename } premieres(limit: 0) { total __typename } relatedMovies(limit: 0) { total __typename } images(limit: 0) { total __typename } ...MovieImagesStats sites(limit: 0) { total __typename } soundtrack(limit: 0) { total __typename } production(limit: 0) { total __typename } negativeCriticReviews: criticReviews(types: NEGATIVE, limit: 0) { total __typename } positiveCriticReviews: criticReviews(types: POSITIVE, limit: 0) { total __typename } audience(limit: 3) { total items { count country { id name __typename } __typename } __typename } releases { date releasers { id name __typename } type __typename } worldPremiere { incompleteDate { accuracy date __typename } __typename } distribution { rusRelease: releases(types: [CINEMA], rerelease: false, countryId: 2, limit: 1) { ...releasesInfoFragment __typename } digitalRelease: releases(types: [DIGITAL], limit: 1) { ...releasesInfoFragment __typename } reRelease: releases(types: [CINEMA], rerelease: true, countryId: 2, limit: 1) { ...releasesInfoFragment __typename } originals: releases(original: true, types: [DIGITAL], limit: 1) { ...OriginalsFragment __typename } __typename } filmMainAward: awards(isMain: true, limit: 15) { items { nomination { award { title slug year __typename } title __typename } win __typename } total __typename } filmAwardWins: awards(isMain: true, isWin: true, limit: 0) { total __typename } ...FilmUserData @include(if: \$isAuthorized) sequelsPrequels: relatedMovies(limit: \$relatedMoviesLimit, type: [BEFORE, AFTER], orderBy: PREMIERE_DATE_ASC) { total limit offset items { relationType movie { id title { russian english original __typename } countries { id name __typename } ...MoviePoster genres { id name slug __typename } rating { expectation { value count isActive __typename } kinopoisk { value count isActive __typename } __typename } viewOption { buttonText isAvailableOnline: isWatchable(filter: {anyDevice: false, anyRegion: false}) purchasabilityStatus subscriptionPurchaseTag type posterWithRightholderLogo __typename } userData @include(if: \$isAuthorized) { voting { value __typename } __typename } ... on Film { productionYear __typename } ... on Video { productionYear __typename } ... on TvSeries { releaseYears { start end __typename } __typename } ... on TvShow { releaseYears { start end __typename } __typename } ... on MiniSeries { releaseYears { start end __typename } __typename } __typename } __typename } __typename } watchability { items { platform { name logo { avatarsUrl __typename } __typename } url __typename } __typename } ...MovieFactsCount ...MovieBloopersCount ...MovieUsersReviewsCount ...MovieMediaPostsCount ...MovieTrailersCount ...MovieCriticReviewsCount ...MovieSimilarMoviesCount ...MovieOriginalMoviesCount __typename } tvSeries(id: \$filmId) { id __typename } webPage(platform: DESKTOP) { kpFilmPage(filmId: \$filmId) { additionalInfoBlocks { ...BlocksConfigFragment __typename } sidebarBlocks { ...BlocksConfigFragment __typename } footer { ...FooterConfigData __typename } htmlMeta { ...OgImage __typename } __typename } __typename } ...Promotions @include(if: \$isAuthorized) } fragment FilmIsTicketsAvailable on Film { isTicketsAvailable: isTicketsAvailableByKpCityId(kpCityId: \$kpCityId) __typename } fragment ViewOption on ViewOption { type purchasabilityStatus buttonText originalButtonText subscriptionPurchaseTag promotionActionType rightholderLogoUrlForPoster posterWithRightholderLogo isAvailableOnline: isWatchable(filter: {anyDevice: false, anyRegion: false}) isWatchable(filter: {anyDevice: true, anyRegion: false}) watchabilityStatus promotionIcons { avatarsUrl fallbackUrl __typename } mainPromotionAbsoluteAmount { amount __typename } mastercardPromotionAbsoluteAmount { amount __typename } availabilityAnnounce { ...AvailabilityAnnounce __typename } subscriptionCompositeOffers(mediaBillingTarget: \$mediaBillingTarget) { ...SubscriptionCompositeOffers __typename } __typename } fragment AvailabilityAnnounce on AvailabilityAnnounce { availabilityDate groupPeriodType type announcePromise __typename } fragment SubscriptionCompositeOffers on SubscriptionCompositeOffers { batchPositionId offers { compositeOffer { structureType positionId optionOffers { text additionText name option { name __typename } __typename } tariffOffer { text additionText name tariff { name __typename } __typename } __typename } customPayload { text: overridedText additionText: overridedAdditionalText overridedTarget __typename } __typename } __typename } fragment MoviePoster on Movie { poster { avatarsUrl fallbackUrl __typename } __typename } fragment MovieImagesStats on Movie { concepts: images(types: [CONCEPT], limit: 0) { total __typename } covers: images(types: [COVER], limit: 0) { total __typename } fanarts: images(types: [FAN_ART], limit: 0) { total __typename } posters: images(types: [POSTER], limit: 0) { total __typename } promos: images(types: [PROMO], limit: 0) { total __typename } screenshots: images(types: [SCREENSHOT], limit: 0) { total __typename } shootings: images(types: [SHOOTING], limit: 0) { total __typename } stills: images(types: [STILL], limit: 0) { total __typename } wallpapers: images(types: [WALLPAPER], limit: 0) { total __typename } __typename } fragment releasesInfoFragment on PagingList_Release { items { date { accuracy date __typename } companies { id slugId slug displayName __typename } __typename } __typename } fragment OriginalsFragment on PagingList_Release { items { companies { displayName id originalsMovieList { id url __typename } __typename } __typename } __typename } fragment FilmUserData on Film { userData { folders { id name __typename } voting { value votedAt __typename } expectation { value __typename } note { value makeDate __typename } watchStatuses { notInterested { value __typename } watched { value __typename } __typename } __typename } __typename } fragment MovieFactsCount on Movie { factsCount: trivias(type: FACT, limit: 0) { total __typename } __typename } fragment MovieBloopersCount on Movie { bloopersCount: trivias(type: BLOOPER, limit: 0) { total __typename } __typename } fragment MovieUsersReviewsCount on Movie { usersReviewsCount: userReviews(limit: 0) { total __typename } __typename } fragment MovieMediaPostsCount on Movie { mediaPostsCount: post(limit: 0) { total __typename } __typename } fragment MovieTrailersCount on Movie { trailersCount: trailers(limit: 0) { total __typename } __typename } fragment MovieCriticReviewsCount on Movie { criticReviewsCount: criticReviews(limit: 0) { total __typename } __typename } fragment MovieSimilarMoviesCount on Movie { similarMoviesCount: userRecommendations(limit: 0) { total __typename } __typename } fragment MovieOriginalMoviesCount on Movie { distribution { releases(original: true, types: [DIGITAL], limit: 1) { items { companies { originalsMovieList { movies(supportedItemTypes: [MOVIE_LIST_ITEM], limit: 0) { total __typename } __typename } __typename } __typename } __typename } __typename } __typename } fragment BlocksConfigFragment on BlockConfiguration { type params { useClientRender __typename } __typename } fragment FooterConfigData on FooterConfiguration { socialNetworkLinks { icon { avatarsUrl __typename } url __typename } appMarketLinks { icon { avatarsUrl __typename } url __typename } links { title url __typename } __typename } fragment OgImage on HtmlMeta { openGraph { image { avatarsUrl __typename } __typename } __typename } fragment Promotions on Query { promotions(promotionConfigFilter: \$promotionsConfig) { config id type __typename } __typename } "
    )
}

fun getFilmsBody2(filmID: Int): RequestBody {
    return generateBody(
        "MovieDetails",
        String.format(
            "{ \"movieId\": %s, \"countryId\": 2, \"cityId\": 1, \"sequelsAndPrequelsLimit\": 10, \"relatedMoviesLimit\": 10, \"actorsLimit\": 12, \"trailersLimit\": 10, \"creatorsPerGroupLimit\": 3, \"imagesPerGroupLimit\": 10, \"factsLimit\": 10, \"bloopersLimit\": 10, \"criticReviewsLimit\": 10, \"userReviewsLimit\": 10, \"userRecommendationMoviesLimit\": 10, \"postsLimit\": 10, \"premieresLimit\": 10, \"isAppendUserData\": false, \"movieListsLimit\": 9, \"streamsLimit\": 10, \"sequelsAndPrequelsRelationsOrder\": [ \"AFTER\", \"BEFORE\" ], \"relatedMoviesRelationsOrder\": [ \"REMAKE\", \"VERSION\", \"SPOOFS\", \"SPOOFED\", \"SPIN_OFF\", \"SPUN_OFF_FROM\", \"REFERENCES\", \"REFERENCES_IN\", \"EDITED_FROM\", \"EDITED_INTO\", \"ALTERNATE_LANGUAGE\" ], \"friendsVotesLimit\": 10, \"isTariffSubscriptionActive\": true, \"mediaBillingTarget\": \"kp-0822\", \"checkSilentInvoiceAvailability\": false }",
            filmID
        ),
        "query MovieDetails(\$movieId: Long!, \$countryId: Long!, \$cityId: Int!, \$sequelsAndPrequelsLimit: Int!, \$relatedMoviesLimit: Int!, \$actorsLimit: Int!, \$trailersLimit: Int!, \$creatorsPerGroupLimit: Int!, \$imagesPerGroupLimit: Int!, \$factsLimit: Int!, \$bloopersLimit: Int!, \$criticReviewsLimit: Int!, \$userReviewsLimit: Int!, \$userRecommendationMoviesLimit: Int!, \$postsLimit: Int!, \$premieresLimit: Int!, \$isAppendUserData: Boolean!, \$movieListsLimit: Int!, \$streamsLimit: Int!, \$sequelsAndPrequelsRelationsOrder: [RelatedMovieType!]!, \$relatedMoviesRelationsOrder: [RelatedMovieType!]!, \$friendsVotesLimit: Int!, \$isTariffSubscriptionActive: Boolean!, \$mediaBillingTarget: String!, \$checkSilentInvoiceAvailability: Boolean!) { movie(id: \$movieId) { __typename id contentId url userData @include(if: \$isAppendUserData) { __typename ... movieFullUserDataFragment } editorAnnotation gallery { __typename posters { __typename ... moviePostersFragment } covers { __typename square { __typename ... imageFragment } horizontal { __typename ... imageFragment } } logos { __typename rightholderForPoster { __typename ... imageFragment } rightholderForCover(filter: {formFactor: S, theme: LIGHT}) { __typename image { __typename ... imageFragment } } } } ... movieLogoFragment rating { __typename ...fullRatingFragment } title { __typename ...titleFragment } ... movieDetailsImagesFragment viewOption { __typename ... viewOptionDetailedFragment } releaseOptions { __typename ... movieReleaseOptionsFragment } ... movieDetailsCreatorsFragment countries { __typename ...countryFragment } ...movieDetailsDurationFragment genres { __typename ...genreFragment } restriction { __typename ...restrictionFragment } distribution { __typename ... distributionFragment } synopsis shortDescription isTicketsAvailableByKpCityId(kpCityId: \$cityId) ... movieDetailsActorsFragment ... movieDetailsWatchabilityFragment mainTrailer { __typename ... trailerFragment } trailers(limit: \$trailersLimit, orderBy: IS_MAIN_MAKE_DATE_DESC) { __typename total items { __typename ... trailerFragment } } facts: trivias(type: FACT, limit: \$factsLimit) { __typename total items { __typename ... triviaFragment } } bloopers: trivias(type: BLOOPER, limit: \$bloopersLimit) { __typename total items { __typename ... triviaFragment } } ... movieTopsFragment ... movieDetailsSequelsAndPrequelsFragment ... movieDetailsRelatedMoviesFragment ... movieOttFragment ... movieOttPromoTrailerFragment ... movieYearsFragment ... movieEpisodesFragment posts: post(mainOnly: true, limit: \$postsLimit) { __typename total items { __typename ... postFragment } } ... reviewsFragment ... movieDetailsAwardsFragment dvdSales { __typename totalAmount { __typename ... moneyAmountFragment } } boxOffice { __typename budget { __typename ... moneyAmountFragment } marketing { __typename ... moneyAmountFragment } rusBox { __typename ... moneyAmountFragment } usaBox { __typename ... moneyAmountFragment } worldBox { __typename ... moneyAmountFragment } } userRecommendations(limit: \$userRecommendationMoviesLimit) { __typename total items { __typename movie { __typename ... movieSummaryFragment } } } movieLists(limit: \$movieListsLimit) { __typename total items { __typename ... movieListRelationFragment } } } } fragment movieLogoFragment on Movie { __typename gallery { __typename logos { __typename horizontal { __typename ... imageFragment origSize { __typename width height } } } } } fragment movieDetailsImagesFragment on Movie { __typename gallery { __typename filteredImagesTotal: images(types: [STILL, SHOOTING, POSTER], offset: 0, limit: 0) { __typename total } filteredImagesStill: images(types: [STILL], offset: 0, limit: \$imagesPerGroupLimit) { __typename ... movieImageCollectionFragment } filteredImagesShooting: images(types: [SHOOTING], offset: 0, limit: \$imagesPerGroupLimit) { __typename ... movieImageCollectionFragment } filteredImagesPosters: images(types: [POSTER], offset: 0, limit: \$imagesPerGroupLimit) { __typename ... movieImageCollectionFragment } } } fragment movieDetailsCreatorsFragment on Movie { __typename directors: members(role: [DIRECTOR], offset: 0, limit: \$creatorsPerGroupLimit) { __typename ... membersListFragment } producers: members(role: [PRODUCER], offset: 0, limit: \$creatorsPerGroupLimit) { __typename ... membersListFragment } writers: members(role: [WRITER], offset: 0, limit: \$creatorsPerGroupLimit) { __typename ... membersListFragment } operators: members(role: [OPERATOR], offset: 0, limit: \$creatorsPerGroupLimit) { __typename ... membersListFragment } composers: members(role: [COMPOSER], offset: 0, limit: \$creatorsPerGroupLimit) { __typename ... membersListFragment } } fragment movieDetailsDurationFragment on Movie { __typename ... on Film { duration: duration } ... on TvSeries { duration: seriesDuration } ... on MiniSeries { duration: seriesDuration } ... on Video { duration: duration } ... on TvShow { duration: seriesDuration } } fragment movieDetailsActorsFragment on Movie { __typename actors: members(role: [ACTOR, CAMEO, GROUP_CAMEO, VOICEOVER, UNCREDITED, GROUP_UNCREDITED], limit: \$actorsLimit, orderBy: BY_ROLE_POSITION_BY_CREW_PRIORITY) { __typename total items { __typename ... movieCrewMemberSummaryFragment } } } fragment movieDetailsWatchabilityFragment on Movie { __typename watchability { __typename total } } fragment movieTopsFragment on Movie { __typename top10 ... on Film { top250 } ... on TvSeries { top250 } ... on MiniSeries { top250 } ... on TvShow { top250 } } fragment movieDetailsSequelsAndPrequelsFragment on Movie { __typename sequelsAndPrequels: relatedMovies(orderBy: PREMIERE_DATE_ASC, offset: 0, limit: \$sequelsAndPrequelsLimit, type: \$sequelsAndPrequelsRelationsOrder) { __typename total items { __typename movie { __typename ... movieSummaryFragment } } } } fragment movieDetailsRelatedMoviesFragment on Movie { __typename related: relatedMovies(orderBy: TYPE_POSITION__MOVIE_ID_ASC, offset: 0, limit: \$relatedMoviesLimit, type: \$relatedMoviesRelationsOrder) { __typename total items { __typename relationType movie { __typename ... movieSummaryFragment } } } } fragment movieOttFragment on Movie { __typename ott { __typename preview { __typename ...previewFeatureFragment streams(filter: {isSupportedByClient: true}, offset: 0, limit: \$streamsLimit) { __typename ...movieOttStreamsFragment } } ... movieOttNextEpisodeFragment } } fragment movieOttPromoTrailerFragment on Movie { __typename ott { __typename trailers(onlyPromo: true, limit: 1) { __typename items { __typename ...ottTrailerFragment } } } } fragment movieYearsFragment on Movie { __typename ... on VideoInterface { productionYear } ... on Series { productionYear releaseYears { __typename start end } } } fragment movieEpisodesFragment on Movie { __typename ... on MiniSeries { episodesCount seasons { __typename total } } ... on TvSeries { episodesCount seasons { __typename total } } ... on TvShow { episodesCount seasons { __typename total } } } fragment reviewsFragment on Movie { __typename criticReviews(limit: \$criticReviewsLimit, orderBy: TEXT_DATE_DESC) { __typename total items { __typename ... criticReviewFragment } } criticReviewsTotalPositive: criticReviews(types: [POSITIVE]) { __typename total } criticReviewsTotalNegative: criticReviews(types: [NEGATIVE]) { __typename total } ... userReviewsFragment userReviewsTotalPositive: userReviews(types: [POSITIVE]) { __typename total } userReviewsTotalNegative: userReviews(types: [NEGATIVE]) { __typename total } userReviewsTotalNeutral: userReviews(types: [NEUTRAL]) { __typename total } } fragment movieDetailsAwardsFragment on Movie { __typename mainAwardsInfo: awards(offset: 0, limit: 1, isMain: true, orderBy: WIN_FIRST_YEAR_DESC_NOMINATION_ASC) { __typename total items { __typename ... movieAwardNomineeFragment } } mainAndWinAwardsInfo: awards(offset: 0, limit: 1, isMain: true, isWin: true, orderBy: WIN_FIRST_YEAR_DESC_NOMINATION_ASC) { __typename total } allAwardsInfo: awards(offset: 0, limit: 0, orderBy: WIN_FIRST_YEAR_DESC_NOMINATION_ASC) { __typename total } } fragment imageFragment on Image { __typename avatarsUrl fallbackUrl } fragment movieImageCollectionFragment on PagingList_MovieImage { __typename total offset limit items { __typename ... movieImageFragment } } fragment movieImageFragment on MovieImage { __typename type copyright author { __typename login } image { __typename origSize { __typename width height } ... imageFragment } } fragment membersListFragment on PagingList_FilmCrewMember { __typename total items { __typename ... movieCrewMemberFragment } } fragment movieCrewMemberFragment on FilmCrewMember { __typename role roleDetails: details person { __typename ... personSummaryFragment bestFilms: bestMovies(type: FILM) { __typename ... bestMoviesFilmpographyListFragment } bestSeries: bestMovies(type: SERIES) { __typename ... bestMoviesFilmpographyListFragment } } } fragment personSummaryFragment on Person { __typename id name gender originalName dateOfBirth { __typename ...incompleteDateFragment } dateOfDeath { __typename ...incompleteDateFragment } age poster { __typename ...imageFragment } published } fragment incompleteDateFragment on IncompleteDate { __typename date accuracy } fragment bestMoviesFilmpographyListFragment on PagingList_PersonBestMovie { __typename items { __typename movie { __typename id title { __typename ...titleFragment } rating { __typename ... ratingFragment } } } } fragment titleFragment on Title { __typename russian original } fragment ratingFragment on Rating { __typename kinopoisk { __typename ... ratingValueFragment } expectation { __typename ... ratingValueFragment } } fragment ratingValueFragment on RatingValue { __typename isActive count value(precision: 1) } fragment movieCrewMemberSummaryFragment on FilmCrewMember { __typename role roleDetails: details person { __typename ... personSummaryFragment } } fragment movieSummaryFragment on Movie { __typename id gallery { __typename posters { __typename ... moviePostersFragment } } genres { __typename ... genreFragment } title { __typename ... titleFragment } rating { __typename ... ratingFragment } } fragment genreFragment on Genre { __typename name } fragment moviePostersFragment on MoviePosters { __typename vertical { __typename ... imageFragment } verticalWithRightholderLogo { __typename ... imageFragment } } fragment movieOttNextEpisodeFragment on Ott_AbstractSeries { __typename nextEpisode @include(if: \$isAppendUserData) { __typename episode { __typename contentId number season { __typename number } } } } fragment previewFeatureFragment on OttPreview { __typename features(filter: {layout: OTT_TITLE_CARD}) { __typename alias displayName group } } fragment movieOttStreamsFragment on PagingList_OttStream { __typename items { __typename audioMetas { __typename title audioChannelsNumber } subtitleMetas { __typename title } videoMetas { __typename dynamicRange } videoDescriptorName } } fragment ottTrailerFragment on OttTrailer { __typename streamUrl } fragment userReviewsFragment on Movie { __typename userReviews(limit: \$userReviewsLimit, orderBy: TOP_USEFULNESS_THEN_CREATED_AT_DESC) { __typename total items { __typename ... userReviewFragment } } } fragment criticReviewFragment on CriticReview { __typename id text author { __typename firstName lastName } source { __typename icon { __typename ... imageFragment } title } sourceUrl type } fragment userReviewFragment on UserReview { __typename id text title createdAt author { __typename avatar { __typename ... imageFragment } login } type votes { __typename positiveCount negativeCount } userData @include(if: \$isAppendUserData) { __typename ... on UserReviewUserData { voting } } } fragment movieAwardNomineeFragment on MovieAwardNominee { __typename nomination { __typename ... nominationFragment } win awardImage: image { __typename ... imageFragment } persons(offset: 0, limit: 10) { __typename items { __typename ... personSummaryFragment } } } fragment nominationFragment on AwardNomination { __typename title award { __typename ... awardFragment } } fragment awardFragment on Award { __typename title year } fragment movieFullUserDataFragment on MovieUserData { __typename ... movieUserDataFragment friendsVoting(orderBy: VOTE_VALUE_DESC, limit: \$friendsVotesLimit) { __typename averageVote total items { __typename ... friendVoteFragment } } } fragment movieUserDataFragment on MovieUserData { __typename isPlannedToWatch folders { __typename ... folderFragment } voting { __typename ... voteFragment } expectation { __typename value } watchStatuses { __typename ...watchStatusesFragment } } fragment friendVoteFragment on FriendVote_Friend { __typename attitude friend { __typename user { __typename ... userFragment } } vote { __typename ... voteFragment } } fragment voteFragment on Vote { __typename value } fragment userFragment on User { __typename login avatar { __typename ... imageFragment } } fragment folderFragment on Folder { __typename id name } fragment watchStatusesFragment on WatchStatuses { __typename notInterested { __typename value } watched { __typename value } } fragment fullRatingFragment on Rating { __typename kinopoisk { __typename ... ratingValueFragment } expectation { __typename ... percentRatingValueFragment } imdb { __typename ... ratingValueFragment } worldwideCritics { __typename ... ratingWithVotesValueFragment } russianCritics { __typename ... percentRatingValueFragment } positiveReviewRate { __typename ... percentRatingValueFragment } } fragment percentRatingValueFragment on RatingValue { __typename isActive count value(precision: 0) } fragment ratingWithVotesValueFragment on RatingWithVotesValue { __typename isActive count value } fragment viewOptionDetailedFragment on ViewOption { __typename ... viewOptionShortFragment purchaseRejectionReason { __typename ... watchingRejection } watchingRejectionReason { __typename ... watchingRejection } downloadRejectionReason { __typename ... watchingRejection } subscriptionCompositeOffers(mediaBillingTarget: \$mediaBillingTarget, checkSilentInvoiceAvailability: \$checkSilentInvoiceAvailability) @include(if: \$isTariffSubscriptionActive) { __typename ... subscriptionOfferCompositeDataFragment } watchPeriod { __typename ...movieWatchPeriodFragment } } fragment viewOptionShortFragment on ViewOption { __typename type purchasabilityStatus watchabilityStatus isWatchableOnDeviceInCurrentRegion: isWatchable(filter: {anyDevice: false, anyRegion: false}) downloadabilityStatus subscriptionPurchaseTag descriptionText buttonText originalButtonText promotionActionType mainPromotionAbsoluteAmount { __typename ... moneyAmountFragment } mastercardPromotionAbsoluteAmount { __typename ... moneyAmountFragment } availabilityAnnounce { __typename ... availabilityAnnounceFragment } contentPackageToBuy { __typename ... movieContentPackageToBuyFragment } transactionalMinimumPrice { __typename ...moneyAmountFragment } transactionalPrice { __typename ...moneyAmountFragment } priceWithTotalDiscount { __typename ...moneyAmountFragment } optionMonetizationModels } fragment watchingRejection on WatchingRejection { __typename details reason } fragment subscriptionOfferCompositeDataFragment on SubscriptionCompositeOffers { __typename batchPositionId offers { __typename ... subscriptionOfferCompositeOffersFragment customPayload { __typename ... subscriptionOfferCustomPayloadFragment } } } fragment subscriptionOfferCompositeOffersFragment on OttCompositeOffer { __typename compositeOffer { __typename forActiveOffers { __typename ... subscriptionOfferForActiveOffersFragment } structureType tariffOffer { __typename ... subscriptionOfferTariffFragment } optionOffers { __typename ... subscriptionOfferOptionFragment } positionId silentInvoiceAvailable } } fragment subscriptionOfferForActiveOffersFragment on PlusOfferUnion { __typename ... on PlusOptionOffer { ... subscriptionOfferOptionFragment } ... on PlusTariffOffer { ... subscriptionOfferTariffFragment } } fragment subscriptionOfferOptionFragment on PlusOptionOffer { __typename additionText description name title text option { __typename name } plans { __typename } } fragment subscriptionOfferTariffFragment on PlusTariffOffer { __typename additionText description name title text tariff { __typename name } plans { __typename } } fragment subscriptionOfferCustomPayloadFragment on OttCompositeOfferCustomPayload { __typename overridedAdditionalText overridedText overridedTarget } fragment movieWatchPeriodFragment on WatchPeriod { __typename timeToExpire watchPeriodStatus } fragment moneyAmountFragment on MoneyAmount { __typename amount currency { __typename ... currencyFragment } } fragment currencyFragment on Currency { __typename symbol } fragment availabilityAnnounceFragment on AvailabilityAnnounce { __typename announcePromise availabilityDate groupPeriodType type } fragment movieContentPackageToBuyFragment on ContentPackage { __typename billingFeatureName } fragment movieReleaseOptionsFragment on ReleaseOptions { __typename is3d isImax } fragment countryFragment on Country { __typename id name } fragment restrictionFragment on Restriction { __typename age mpaa } fragment distributionFragment on Distribution { __typename countrySpecificPremiere: premieres(limit: 1, countryId: \$countryId) { __typename items { __typename ... moviePremiereFragment } } worldPremiere { __typename ... moviePremiereFragment } allReleases: releases(types: [BLURAY, DIGITAL, DVD]) { __typename items { __typename ... movieDetailsReleaseFragment } } premieres(limit: \$premieresLimit) { __typename items { __typename ... moviePremiereFragment } } } fragment moviePremiereFragment on Premiere { __typename country { __typename ...countryFragment } incompleteDate { __typename ...incompleteDateFragment } } fragment movieDetailsReleaseFragment on Release { __typename type companies { __typename displayName } country { __typename ... countryFragment } date { __typename ...incompleteDateFragment } } fragment trailerFragment on Trailer { __typename id title isMain createdAt duration movie { __typename id } preview { __typename ... imageFragment } streamUrl } fragment triviaFragment on Trivia { __typename id isSpoiler text type } fragment postFragment on Post { __typename id title publishedAt commentsCount coverImage { __typename ... imageFragment } thumbImage { __typename ... imageFragment } } fragment movieListRelationFragment on MovieListRelation { __typename position movieList { __typename ... movieListFragment movies(offset: 0, limit: 0) { __typename total } } } fragment movieListFragment on MovieListMeta { __typename id autoList name description url cover { __typename ... imageFragment } filterQuery { __typename ... movieListFilterFragment } } fragment movieListFilterFragment on MovieListFilter { __typename countryId excludeViewed genreId onlyHighRated onlyReleased onlyTop origin type viewOption years { __typename start end } }"
    )
}

fun getTvSerieBody(tvSerieID: Int): RequestBody {
    return generateBody(
        "TvSeriesBaseInfo",
        String.format(
            "{\"tvSeriesId\":%s,\"isAuthorized\":false,\"promotionsConfig\":{\"configVersion\":\"1.0\",\"platform\":\"kp\"},\"actorsLimit\":10,\"voiceOverActorsLimit\":5,\"relatedMoviesLimit\":14,\"mediaBillingTarget\":\"kp-0822\"}",
            tvSerieID
        ),
        "query TvSeriesBaseInfo(\$tvSeriesId: Long!, \$isAuthorized: Boolean!, \$promotionsConfig: PromotionConfigFilterInput!, \$mediaBillingTarget: String!, \$actorsLimit: Int, \$voiceOverActorsLimit: Int, \$relatedMoviesLimit: Int) { tvSeries(id: \$tvSeriesId) { id contentId title { russian original __typename } productionYear productionStatus shortDescription productionStatusUpdateDate top250 top10 synopsis releaseYears { start end __typename } genres { id name slug __typename } countries { id name __typename } seasons { total __typename } restriction { age mpaa __typename } types { name __typename } cover { image { avatarsUrl fallbackUrl __typename } __typename } onlineViewOptions { descriptionWithPlaceholders descriptionSubtext subscriptionOffersBatchId subscriptionOffersPositionId __typename } viewOption { ...ViewOption __typename } ott { preview { availableMetadata(filter: {isSupportedByClient: null}) { audio subtitles videoDescriptorNames __typename } ...OttPreviewAbstractSeries __typename } promoTrailers: trailers(onlyPromo: true, limit: 1) { items { streamUrl __typename } __typename } __typename } editorAnnotation mainTrailer { id title preview { avatarsUrl fallbackUrl __typename } duration createdAt isEmbedded streamUrl __typename } actors: members(limit: \$actorsLimit, role: [ACTOR, CAMEO, UNCREDITED]) { items { person { id name originalName __typename } __typename } total __typename } voiceOverActors: members(limit: \$voiceOverActorsLimit, role: VOICEOVER) { items { person { id name originalName __typename } __typename } total __typename } tagline directors: members(role: DIRECTOR, limit: 4) { items { person { id name originalName __typename } __typename } __typename } writers: members(role: WRITER, limit: 4) { items { person { id name originalName __typename } __typename } __typename } producers: members(role: PRODUCER, limit: 4) { items { person { id name originalName __typename } __typename } __typename } operators: members(role: OPERATOR, limit: 4) { items { person { id name originalName __typename } __typename } __typename } composers: members(role: COMPOSER, limit: 4) { items { person { id name originalName __typename } __typename } __typename } designers: members(role: [DESIGN, ART, COSTUMER, DECORATOR], limit: 4) { items { person { id name originalName __typename } __typename } __typename } filmEditors: members(role: EDITOR, limit: 4) { items { person { id name originalName __typename } __typename } __typename } boxOffice { budget { amount currency { symbol __typename } __typename } rusBox { amount currency { symbol __typename } __typename } usaBox { amount currency { symbol __typename } __typename } worldBox { amount currency { symbol __typename } __typename } marketing { amount currency { symbol __typename } __typename } __typename } ...MoviePoster rating { expectation { value count isActive __typename } imdb { value count isActive __typename } kinopoisk { value count isActive __typename } russianCritics { value count isActive __typename } worldwideCritics { value count isActive __typename } reviewCount { value count isActive __typename } __typename } totalDuration seriesDuration keywords { total __typename } awards(limit: 0) { total __typename } premieres(limit: 0) { total __typename } relatedMovies(limit: 0) { total __typename } images(limit: 0) { total __typename } ...MovieImagesStats sites(limit: 0) { total __typename } soundtrack(limit: 0) { total __typename } production(limit: 0) { total __typename } episodes(limit: 0) { total __typename } negativeCriticReviews: criticReviews(types: NEGATIVE, limit: 0) { total __typename } positiveCriticReviews: criticReviews(types: POSITIVE, limit: 0) { total __typename } releases { date releasers { id name __typename } type __typename } worldPremiere { incompleteDate { accuracy date __typename } __typename } distribution { rusRelease: releases(types: [CINEMA], rerelease: false, countryId: 2, limit: 1) { ...releasesInfoFragment __typename } digitalRelease: releases(types: [DIGITAL], limit: 1) { ...releasesInfoFragment __typename } reRelease: releases(types: [CINEMA], rerelease: true, countryId: 2, limit: 1) { ...releasesInfoFragment __typename } originals: releases(original: true, types: [DIGITAL], limit: 1) { ...OriginalsFragment __typename } __typename } userReviews { total __typename } filmMainAward: awards(isMain: true, limit: 15) { items { nomination { award { title slug year __typename } title __typename } win __typename } total __typename } filmMainAwardWins: awards(limit: 0, isMain: true, isWin: true) { total __typename } ...TvSeriesUserData @include(if: \$isAuthorized) sequelsPrequels: relatedMovies(limit: \$relatedMoviesLimit, type: [BEFORE, AFTER], orderBy: PREMIERE_DATE_ASC) { total limit offset items { relationType movie { id title { russian english original __typename } countries { id name __typename } ...MoviePoster genres { id name slug __typename } rating { expectation { value count isActive __typename } kinopoisk { value count isActive __typename } __typename } viewOption { buttonText isAvailableOnline: isWatchable(filter: {anyDevice: false, anyRegion: false}) purchasabilityStatus subscriptionPurchaseTag type posterWithRightholderLogo __typename } userData @include(if: \$isAuthorized) { voting { value __typename } __typename } ... on Film { productionYear __typename } ... on Video { productionYear __typename } ... on TvSeries { releaseYears { start end __typename } __typename } ... on TvShow { releaseYears { start end __typename } __typename } ... on MiniSeries { releaseYears { start end __typename } __typename } __typename } __typename } __typename } watchability { items { platform { name logo { avatarsUrl __typename } __typename } url __typename } __typename } ...MovieFactsCount ...MovieBloopersCount ...MovieUsersReviewsCount ...MovieMediaPostsCount ...MovieTrailersCount ...MovieCriticReviewsCount ...MovieSimilarMoviesCount ...MovieOriginalMoviesCount __typename } webPage(platform: DESKTOP) { kpTvSeriesPage(tvSeriesId: \$tvSeriesId) { additionalInfoBlocks { ...BlocksConfigFragment __typename } sidebarBlocks { ...BlocksConfigFragment __typename } footer { ...FooterConfigData __typename } htmlMeta { ...OgImage __typename } __typename } __typename } ...Promotions @include(if: \$isAuthorized) } fragment ViewOption on ViewOption { type purchasabilityStatus buttonText originalButtonText subscriptionPurchaseTag promotionActionType rightholderLogoUrlForPoster posterWithRightholderLogo isAvailableOnline: isWatchable(filter: {anyDevice: false, anyRegion: false}) isWatchable(filter: {anyDevice: true, anyRegion: false}) watchabilityStatus promotionIcons { avatarsUrl fallbackUrl __typename } mainPromotionAbsoluteAmount { amount __typename } mastercardPromotionAbsoluteAmount { amount __typename } availabilityAnnounce { ...AvailabilityAnnounce __typename } subscriptionCompositeOffers(mediaBillingTarget: \$mediaBillingTarget) { ...SubscriptionCompositeOffers __typename } __typename } fragment AvailabilityAnnounce on AvailabilityAnnounce { availabilityDate groupPeriodType type announcePromise __typename } fragment SubscriptionCompositeOffers on SubscriptionCompositeOffers { batchPositionId offers { compositeOffer { structureType positionId optionOffers { text additionText name option { name __typename } __typename } tariffOffer { text additionText name tariff { name __typename } __typename } __typename } customPayload { text: overridedText additionText: overridedAdditionalText overridedTarget __typename } __typename } __typename } fragment OttPreviewAbstractSeries on OttPreview_AbstractSeries { firstEpisode { seasonNumber episodeNumber __typename } nextEpisode(fallbackToFirstEpisode: false) @include(if: \$isAuthorized) { title { original russian __typename } seasonNumber episodeNumber duration timing { current maximum __typename } __typename } __typename } fragment MoviePoster on Movie { poster { avatarsUrl fallbackUrl __typename } __typename } fragment MovieImagesStats on Movie { concepts: images(types: [CONCEPT], limit: 0) { total __typename } covers: images(types: [COVER], limit: 0) { total __typename } fanarts: images(types: [FAN_ART], limit: 0) { total __typename } posters: images(types: [POSTER], limit: 0) { total __typename } promos: images(types: [PROMO], limit: 0) { total __typename } screenshots: images(types: [SCREENSHOT], limit: 0) { total __typename } shootings: images(types: [SHOOTING], limit: 0) { total __typename } stills: images(types: [STILL], limit: 0) { total __typename } wallpapers: images(types: [WALLPAPER], limit: 0) { total __typename } __typename } fragment releasesInfoFragment on PagingList_Release { items { date { accuracy date __typename } companies { id slugId slug displayName __typename } __typename } __typename } fragment OriginalsFragment on PagingList_Release { items { companies { displayName id originalsMovieList { id url __typename } __typename } __typename } __typename } fragment TvSeriesUserData on TvSeries { userData { folders { id name __typename } voting { value votedAt __typename } expectation { value __typename } note { value makeDate __typename } watchStatuses { notInterested { value __typename } watched { value __typename } __typename } __typename } __typename } fragment MovieFactsCount on Movie { factsCount: trivias(type: FACT, limit: 0) { total __typename } __typename } fragment MovieBloopersCount on Movie { bloopersCount: trivias(type: BLOOPER, limit: 0) { total __typename } __typename } fragment MovieUsersReviewsCount on Movie { usersReviewsCount: userReviews(limit: 0) { total __typename } __typename } fragment MovieMediaPostsCount on Movie { mediaPostsCount: post(limit: 0) { total __typename } __typename } fragment MovieTrailersCount on Movie { trailersCount: trailers(limit: 0) { total __typename } __typename } fragment MovieCriticReviewsCount on Movie { criticReviewsCount: criticReviews(limit: 0) { total __typename } __typename } fragment MovieSimilarMoviesCount on Movie { similarMoviesCount: userRecommendations(limit: 0) { total __typename } __typename } fragment MovieOriginalMoviesCount on Movie { distribution { releases(original: true, types: [DIGITAL], limit: 1) { items { companies { originalsMovieList { movies(supportedItemTypes: [MOVIE_LIST_ITEM], limit: 0) { total __typename } __typename } __typename } __typename } __typename } __typename } __typename } fragment BlocksConfigFragment on BlockConfiguration { type params { useClientRender __typename } __typename } fragment FooterConfigData on FooterConfiguration { socialNetworkLinks { icon { avatarsUrl __typename } url __typename } appMarketLinks { icon { avatarsUrl __typename } url __typename } links { title url __typename } __typename } fragment OgImage on HtmlMeta { openGraph { image { avatarsUrl __typename } __typename } __typename } fragment Promotions on Query { promotions(promotionConfigFilter: \$promotionsConfig) { config id type __typename } __typename } "
    )
}

fun getSearchBody(q: String): RequestBody {
    return generateBody(
        "SuggestSearch",
        String.format("{keyword: \"%s\", yandexCityId: 213, limit: 10}", q),
        "query SuggestSearch(\$keyword: String!, \$yandexCityId: Int, \$limit: Int) { suggest(keyword: \$keyword) { top(yandexCityId: \$yandexCityId, limit: \$limit) { topResult { global { ...SuggestMovieItem ...SuggestPersonItem ...SuggestCinemaItem ...SuggestMovieListItem __typename } __typename } movies { movie { ...SuggestMovieItem __typename } __typename } persons { person { ...SuggestPersonItem __typename } __typename } cinemas { cinema { ...SuggestCinemaItem __typename } __typename } movieLists { movieList { ...SuggestMovieListItem __typename } __typename } __typename } __typename } } fragment SuggestMovieItem on Movie { id title { russian original __typename } rating { kinopoisk { isActive value __typename } __typename } poster { avatarsUrl fallbackUrl __typename } viewOption { buttonText isAvailableOnline: isWatchable(filter: {anyDevice: false, anyRegion: false}) purchasabilityStatus subscriptionPurchaseTag type availabilityAnnounce { groupPeriodType announcePromise availabilityDate type __typename } __typename } ... on Film { type productionYear __typename } ... on TvSeries { releaseYears { end start __typename } __typename } ... on TvShow { releaseYears { end start __typename } __typename } ... on MiniSeries { releaseYears { end start __typename } __typename } __typename } fragment SuggestPersonItem on Person { id name originalName birthDate poster { avatarsUrl fallbackUrl __typename } __typename } fragment SuggestCinemaItem on Cinema { id ctitle: title city { id name geoId __typename } __typename } fragment SuggestMovieListItem on MovieListMeta { id cover { avatarsUrl __typename } coverBackground { avatarsUrl __typename } name url description movies(limit: 0) { total __typename } __typename } "
    )
}


fun getAddTorrentBody(magnet: String, poster: String, title: String): RequestBody {
    var body: RequestBody? = null
    val jsonObject = JSONObject()
    try {
        jsonObject.put("action", "add")
        jsonObject.put("link", magnet)
        jsonObject.put("poster", poster)
        jsonObject.put("save_to_db", true)
        jsonObject.put("title", title)
        body = jsonObject.toString()
            .toRequestBody("application/json; charset=utf-8".toMediaTypeOrNull())
    } catch (e: Exception) {
        e.printStackTrace()
    }
    return body!!
}

fun getControllerBody(action: String, position: String = ""): RequestBody {
    var body: RequestBody? = null
    val jsonObject = JSONObject()
    try {
        jsonObject.put("action", action)
        jsonObject.put("position", position)
        body = jsonObject.toString()
            .toRequestBody("application/json; charset=utf-8".toMediaTypeOrNull())
    } catch (e: Exception) {
        e.printStackTrace()
    }
    return body!!
}

fun getTorrentsBody(): RequestBody {
    return generateCustomBody("action" to "list")
}

fun getDeleteTorrentsBody(hash: String): RequestBody {
    return generateCustomBody("action" to "rem", "hash" to hash)
}

fun getPlayTorrentBody(title: String, chosenSeries: Int, url: String, hash: String): RequestBody {
    var body: RequestBody? = null
    val jsonObject = JSONObject()
    try {
        jsonObject.put("playlist", "")
        jsonObject.put("action", "play")
        jsonObject.put("ids", "" + chosenSeries)
        jsonObject.put("name", title)
        jsonObject.put("hash", hash)
        jsonObject.put(
            "m3u",
            ("http://$url:$BASE_TORRSERVER_PORT/stream/no$chosenSeries?index=$chosenSeries&play&save&link=$hash")
        )

        body = jsonObject.toString()
            .toRequestBody("application/json; charset=utf-8".toMediaTypeOrNull())
    } catch (e: Exception) {
        e.printStackTrace()
    }
    return body!!
}

fun generateCustomBody(vararg args: Pair<String, String>): RequestBody {
    var body: RequestBody? = null
    val jsonObject = JSONObject()
    try {
        for (i in args) {
            jsonObject.put(i.first, i.second)
        }
        body = jsonObject.toString()
            .toRequestBody("application/json; charset=utf-8".toMediaTypeOrNull())
    } catch (e: Exception) {
        e.printStackTrace()
    }
    return body!!
}